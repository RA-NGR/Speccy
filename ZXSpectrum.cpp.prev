#include "ZXSpectrum.h"

ZXSpectrum::~ZXSpectrum()
{
	free(m_pZXMemory);
	free(m_pContendTable);
}

bool ZXSpectrum::init(Display* pDisplayInstance)
{
	m_pDisplayInstance = pDisplayInstance;
//	m_pPeriphInstance = pPeriphInstance;
	for (uint8_t i = 0; i < 2; i++) m_pScreenBuffer[i] = m_pDisplayInstance->getBuffer(i);
	if ((m_pZXMemory = (uint8_t*)malloc(65535)) == NULL) { printf("Error allocating ZXMemory"); return false; }
	if ((m_pContendTable = (uint8_t*)malloc(42910)) == NULL) { printf("Error allocating contended access table"); return false; }
	memset(m_pContendTable, 0, 42910);
	uint8_t contPattern[] = { 6, 5, 4, 3, 2, 1, 0, 0 };
	for (uint32_t i = 0; i < 42910; i++) m_pContendTable[i] = (((i % 224) > 127) ? 0 : contPattern[(i % 224) % 8]);
	if (!LittleFS.begin()) { DBG_PRINTLN("FS Mount Failed"); return false; }
	if (!LittleFS.exists(ROMFILENAME)) { DBG_PRINTLN("ROM image not found"); return false; }
	File romFile = LittleFS.open(ROMFILENAME, "r");
	if (!(romFile.read(m_pZXMemory, 16384) == 16384)) { DBG_PRINTLN("Error reading ROM image"); return false; }
	LittleFS.end();
	m_initComplete = true;
	return m_initComplete;
}

void ZXSpectrum::drawLine(int posY)
{
	uint16_t posX, zxPixelMapAddr, zxColorAttribAddr, tftMemAddr;
	uint8_t i, zxColorAttrib, zxPixelMap, zxBrightFlag, zxInkColor, zxPaperColor, bitPos;
	int buffSwitch = (posY / DMA_BUFF_SIZE) & 1;
	int buffOffset = (posY % DMA_BUFF_SIZE) * 320;

	for (posX = 0; posX < 4; posX++) // Left border
	{
		if (m_pbRIndex != m_pbWIndex && posY == m_borderColors[m_pbRIndex].y && posX == m_borderColors[m_pbRIndex].x)
		{
			m_borderColor = m_borderColors[m_pbRIndex].color; m_pbRIndex = (++m_pbRIndex) & (BORDER_BUFFER_SIZE - 1);
		}
		for (i = 0; i < 8; i++) m_pScreenBuffer[buffSwitch][((posX * 8 + i) ^ 1) + buffOffset] = m_borderColor;
	}
	for (posX = 0; posX < 32; posX++) // Main area
	{
		if (m_pbRIndex != m_pbWIndex && posY == m_borderColors[m_pbRIndex].y && posX + 4 == m_borderColors[m_pbRIndex].x)
		{
			m_borderColor = m_borderColors[m_pbRIndex].color; m_pbRIndex = (++m_pbRIndex) & (BORDER_BUFFER_SIZE - 1);
		}
		if (posY < 24 || posY > 215)
			for (i = 0; i < 8; i++) m_pScreenBuffer[buffSwitch][((posX * 8 + i + 32) ^ 1) + buffOffset] = m_borderColor;
		else
		{
			zxColorAttribAddr = 0x5800 + (((posY - 24) / 8) * 32) + posX; zxColorAttrib = m_pZXMemory[zxColorAttribAddr];
			zxBrightFlag = (zxColorAttrib & 0x40) >> 3;
			zxPixelMapAddr = 0x4000 + (((posY - 24) % 64) / 8) * 32 + ((posY - 24) % 8) * 256 + ((posY - 24) / 64) * 2048 + posX;
			zxPixelMap = m_pZXMemory[zxPixelMapAddr] ^ ((zxColorAttrib & 0x80) ? ((m_frameCounter & 0x10) ? 255 : 0) : 0);
			zxInkColor = zxColorAttrib & 0x07; zxPaperColor = (zxColorAttrib & 0x38) >> 3;
			for (i = 0; i < 8; i++)
			{
				tftMemAddr = (posX * 8 + i + 32) ^ 1;
				bitPos = (0x80 >> i);
				if ((zxPixelMap & bitPos) != 0)
					m_pScreenBuffer[buffSwitch][tftMemAddr + buffOffset] = m_colorLookup[zxInkColor + zxBrightFlag];
				else
					m_pScreenBuffer[buffSwitch][tftMemAddr + buffOffset] = m_colorLookup[zxPaperColor + zxBrightFlag];
			}
		}
	}
	for (posX = 0; posX < 4; posX++) // Right border
	{
		if (m_pbRIndex != m_pbWIndex && posY == m_borderColors[m_pbRIndex].y && posX + 36 == m_borderColors[m_pbRIndex].x)
		{
			m_borderColor = m_borderColors[m_pbRIndex].color; m_pbRIndex = (++m_pbRIndex) & (BORDER_BUFFER_SIZE - 1);
		}
		for (i = 0; i < 8; i++) m_pScreenBuffer[buffSwitch][((posX * 8 + i + 288) ^ 1) + buffOffset] = m_borderColor;
	}
	for (posX = 0; posX < 16; posX++) // Retrace
	{
		if (m_pbRIndex != m_pbWIndex && posY == m_borderColors[m_pbRIndex].y && posX + 40 == m_borderColors[m_pbRIndex].x)
		{
			m_borderColor = m_borderColors[m_pbRIndex].color; m_pbRIndex = (++m_pbRIndex) & (BORDER_BUFFER_SIZE - 1);
		}
	}
	if (posY % DMA_BUFF_SIZE == DMA_BUFF_SIZE - 1) m_pDisplayInstance->drawBuffer(buffSwitch);
}
